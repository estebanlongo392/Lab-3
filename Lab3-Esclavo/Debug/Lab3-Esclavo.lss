
Lab3-Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000003b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c4f  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000873  00000000  00000000  0000113f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e2  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000348  00000000  00000000  00002801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002b49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	39 01       	movw	r6, r18
  6a:	40 01       	movw	r8, r0
  6c:	47 01       	movw	r8, r14
  6e:	51 01       	movw	r10, r2
  70:	5b 01       	movw	r10, r22
  72:	65 01       	movw	r12, r10
  74:	6f 01       	movw	r12, r30

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e0 e2       	ldi	r30, 0x20	; 32
  8a:	f3 e0       	ldi	r31, 0x03	; 3
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a2 e0       	ldi	r26, 0x02	; 2
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  ac:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <ADC_init>:
	
}
void ADC7(void){
	//ADC7
	ADMUX &= ~((1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX0));
	ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	90 64       	ori	r25, 0x40	; 64
  bc:	90 83       	st	Z, r25
  be:	90 81       	ld	r25, Z
  c0:	9f 77       	andi	r25, 0x7F	; 127
  c2:	90 83       	st	Z, r25
  c4:	90 81       	ld	r25, Z
  c6:	9f 7d       	andi	r25, 0xDF	; 223
  c8:	90 83       	st	Z, r25
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	98 68       	ori	r25, 0x88	; 136
  d2:	90 83       	st	Z, r25
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	21 f4       	brne	.+8      	; 0xe0 <ADC_init+0x2c>
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	31 f4       	brne	.+12     	; 0xf0 <ADC_init+0x3c>
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	31 f4       	brne	.+12     	; 0x100 <ADC_init+0x4c>
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret
 100:	80 31       	cpi	r24, 0x10	; 16
 102:	31 f4       	brne	.+12     	; 0x110 <ADC_init+0x5c>
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret
 110:	80 32       	cpi	r24, 0x20	; 32
 112:	31 f4       	brne	.+12     	; 0x120 <ADC_init+0x6c>
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	85 60       	ori	r24, 0x05	; 5
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret
 120:	80 38       	cpi	r24, 0x80	; 128
 122:	31 f4       	brne	.+12     	; 0x130 <ADC_init+0x7c>
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	87 60       	ori	r24, 0x07	; 7
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	87 60       	ori	r24, 0x07	; 7
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <ADC1>:
 13c:	ec e7       	ldi	r30, 0x7C	; 124
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	80 83       	st	Z, r24
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <ADC2>:
 14e:	ec e7       	ldi	r30, 0x7C	; 124
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	80 83       	st	Z, r24
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
 15e:	08 95       	ret

00000160 <habilitar_conversion>:
}

void habilitar_conversion(void){
	ADCSRA |= (1<<ADSC);//HABILITAR CONVERSION
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <__vector_21>:
#include <avr/interrupt.h>

volatile uint8_t current_channel = 1;
volatile uint8_t adc_value1, adc_value2;

ISR(ADC_vect) {
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	if (current_channel == 1) {
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	61 f4       	brne	.+24     	; 0x1ae <__vector_21+0x42>
		adc_value1 = ADC;
 196:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 19a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 19e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		current_channel = 2;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADC2();
 1a8:	0e 94 a7 00 	call	0x14e	; 0x14e <ADC2>
 1ac:	0b c0       	rjmp	.+22     	; 0x1c4 <__vector_21+0x58>
		} else {
		adc_value2 = ADC;
 1ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1b6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc_value2>
		current_channel = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADC1();
 1c0:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC1>
	}
	habilitar_conversion();
 1c4:	0e 94 b0 00 	call	0x160	; 0x160 <habilitar_conversion>
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <main>:

int main(void) {
	SpiInit(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOK_FIRST_EDGE);
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	80 e4       	ldi	r24, 0x40	; 64
 1f2:	0e 94 21 01 	call	0x242	; 0x242 <SpiInit>
	ADC_init(128);
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_init>
	habilitar_conversion();
 1fc:	0e 94 b0 00 	call	0x160	; 0x160 <habilitar_conversion>
	ADC1();
 200:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC1>
	SPCR |= (1 << SPIE);
 204:	8c b5       	in	r24, 0x2c	; 44
 206:	80 68       	ori	r24, 0x80	; 128
 208:	8c bd       	out	0x2c, r24	; 44
	sei();
 20a:	78 94       	sei

	while (1) {
		uint8_t SpiValor = SPDR;
 20c:	8e b5       	in	r24, 0x2e	; 46
		if (SpiValor == 'c') {
 20e:	83 36       	cpi	r24, 0x63	; 99
 210:	59 f4       	brne	.+22     	; 0x228 <main+0x3e>
			SpiWrite(adc_value1);
 212:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 216:	0e 94 86 01 	call	0x30c	; 0x30c <SpiWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x34>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x3a>
 224:	00 00       	nop
 226:	f2 cf       	rjmp	.-28     	; 0x20c <main+0x22>
			_delay_ms(1);
			} else if (SpiValor == 'd') {
 228:	84 36       	cpi	r24, 0x64	; 100
 22a:	81 f7       	brne	.-32     	; 0x20c <main+0x22>
			SpiWrite(adc_value2);
 22c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <adc_value2>
 230:	0e 94 86 01 	call	0x30c	; 0x30c <SpiWrite>
 234:	8f e9       	ldi	r24, 0x9F	; 159
 236:	9f e0       	ldi	r25, 0x0F	; 15
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x4e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x54>
 23e:	00 00       	nop
 240:	e5 cf       	rjmp	.-54     	; 0x20c <main+0x22>

00000242 <SpiInit>:
#include "SPI_SLAVE.h"
void SpiInit(Spi_Type Type,Spi_Data_Order DataOrder,Spi_Clock_Polarity ClockPolarity,Spi_Clock_Phase ClockPhase){
 242:	e8 2f       	mov	r30, r24
/* PB2 = SS
   PB3 = MOSI
   PB4 = MISO
   PB5 = SCK   
	*/
	if(Type & (1<<MSTR)) //master mode
 244:	84 ff       	sbrs	r24, 4
 246:	52 c0       	rjmp	.+164    	; 0x2ec <SpiInit+0xaa>
	{
		DDRB |= (1<<DDB3)|(1<<DDB5)|(1<<DDB2);//  MOSI, SCK, SS
 248:	84 b1       	in	r24, 0x04	; 4
 24a:	8c 62       	ori	r24, 0x2C	; 44
 24c:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1<<DDB4);//MISO
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	8f 7e       	andi	r24, 0xEF	; 239
 252:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1<<MSTR); //MASTER
 254:	8c b5       	in	r24, 0x2c	; 44
 256:	80 61       	ori	r24, 0x10	; 16
 258:	8c bd       	out	0x2c, r24	; 44
		uint8_t temp = Type & 0b00000111;
 25a:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
 25c:	8e 2f       	mov	r24, r30
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	87 30       	cpi	r24, 0x07	; 7
 262:	91 05       	cpc	r25, r1
 264:	08 f0       	brcs	.+2      	; 0x268 <SpiInit+0x26>
 266:	4b c0       	rjmp	.+150    	; 0x2fe <SpiInit+0xbc>
 268:	fc 01       	movw	r30, r24
 26a:	ec 5c       	subi	r30, 0xCC	; 204
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	0c 94 88 01 	jmp	0x310	; 0x310 <__tablejump2__>
			
  			case 0://div2
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 272:	8c b5       	in	r24, 0x2c	; 44
 274:	8c 7f       	andi	r24, 0xFC	; 252
 276:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 278:	8d b5       	in	r24, 0x2d	; 45
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	8d bd       	out	0x2d, r24	; 45
			break;
 27e:	3f c0       	rjmp	.+126    	; 0x2fe <SpiInit+0xbc>
			
			case 1://div4
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 280:	8c b5       	in	r24, 0x2c	; 44
 282:	8c 7f       	andi	r24, 0xFC	; 252
 284:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 286:	8d b5       	in	r24, 0x2d	; 45
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	8d bd       	out	0x2d, r24	; 45
			break;
 28c:	38 c0       	rjmp	.+112    	; 0x2fe <SpiInit+0xbc>
			
			case 2://div8
				SPCR |= (1<<SPR0);
 28e:	8c b5       	in	r24, 0x2c	; 44
 290:	81 60       	ori	r24, 0x01	; 1
 292:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 294:	8c b5       	in	r24, 0x2c	; 44
 296:	8d 7f       	andi	r24, 0xFD	; 253
 298:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 29a:	8d b5       	in	r24, 0x2d	; 45
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	8d bd       	out	0x2d, r24	; 45
			break;
 2a0:	2e c0       	rjmp	.+92     	; 0x2fe <SpiInit+0xbc>
			
			case 3://div16
				SPCR |= (1<<SPR0);
 2a2:	8c b5       	in	r24, 0x2c	; 44
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 2a8:	8c b5       	in	r24, 0x2c	; 44
 2aa:	8d 7f       	andi	r24, 0xFD	; 253
 2ac:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 2ae:	8d b5       	in	r24, 0x2d	; 45
 2b0:	8e 7f       	andi	r24, 0xFE	; 254
 2b2:	8d bd       	out	0x2d, r24	; 45
			break;
 2b4:	24 c0       	rjmp	.+72     	; 0x2fe <SpiInit+0xbc>
			
			case 4://div32
				SPCR &= ~(1<<SPR0);
 2b6:	8c b5       	in	r24, 0x2c	; 44
 2b8:	8e 7f       	andi	r24, 0xFE	; 254
 2ba:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 2bc:	8c b5       	in	r24, 0x2c	; 44
 2be:	82 60       	ori	r24, 0x02	; 2
 2c0:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 2c2:	8d b5       	in	r24, 0x2d	; 45
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	8d bd       	out	0x2d, r24	; 45
			break;
 2c8:	1a c0       	rjmp	.+52     	; 0x2fe <SpiInit+0xbc>
			
			case 5://div64
				SPCR &= ~(1<<SPR0);
 2ca:	8c b5       	in	r24, 0x2c	; 44
 2cc:	8e 7f       	andi	r24, 0xFE	; 254
 2ce:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 2d0:	8c b5       	in	r24, 0x2c	; 44
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 2d6:	8d b5       	in	r24, 0x2d	; 45
 2d8:	8e 7f       	andi	r24, 0xFE	; 254
 2da:	8d bd       	out	0x2d, r24	; 45
			break;
 2dc:	10 c0       	rjmp	.+32     	; 0x2fe <SpiInit+0xbc>
			
			case 6://div128
				SPCR |= ((1<<SPR1)|(1<<SPR0));
 2de:	8c b5       	in	r24, 0x2c	; 44
 2e0:	83 60       	ori	r24, 0x03	; 3
 2e2:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 2e4:	8d b5       	in	r24, 0x2d	; 45
 2e6:	8e 7f       	andi	r24, 0xFE	; 254
 2e8:	8d bd       	out	0x2d, r24	; 45
			break;
 2ea:	09 c0       	rjmp	.+18     	; 0x2fe <SpiInit+0xbc>
		}
		
	} else{ //si es esclavo
		DDRB |=(1<<DDB4);//miso
 2ec:	84 b1       	in	r24, 0x04	; 4
 2ee:	80 61       	ori	r24, 0x10	; 16
 2f0:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1<<DDB3)|(1<<DDB5)|(1<<DDB2));//mosi, sck, ss
 2f2:	84 b1       	in	r24, 0x04	; 4
 2f4:	83 7d       	andi	r24, 0xD3	; 211
 2f6:	84 b9       	out	0x04, r24	; 4
		SPCR &= ~(1<<MSTR);//SALVE
 2f8:	8c b5       	in	r24, 0x2c	; 44
 2fa:	8f 7e       	andi	r24, 0xEF	; 239
 2fc:	8c bd       	out	0x2c, r24	; 44
		
	}
	//ENABLE, DATA ORDER, CLOCK POLARITY, CLOCK PHASE
	SPCR |= (1<<SPE)|DataOrder|ClockPolarity|ClockPhase;
 2fe:	8c b5       	in	r24, 0x2c	; 44
 300:	46 2b       	or	r20, r22
 302:	24 2b       	or	r18, r20
 304:	28 2b       	or	r18, r24
 306:	20 64       	ori	r18, 0x40	; 64
 308:	2c bd       	out	0x2c, r18	; 44
 30a:	08 95       	ret

0000030c <SpiWrite>:
	
}

void  SpiWrite(uint8_t dat){//WRITE DATA TO SPI
	SPDR = dat;
 30c:	8e bd       	out	0x2e, r24	; 46
 30e:	08 95       	ret

00000310 <__tablejump2__>:
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	05 90       	lpm	r0, Z+
 316:	f4 91       	lpm	r31, Z
 318:	e0 2d       	mov	r30, r0
 31a:	09 94       	ijmp

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
